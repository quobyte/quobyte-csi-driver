#!/bin/bash

# Pre-requirements:
# valid ca.pem, client-cert.pem and client-key.pem files were added to working directory
# Docker, k8s, kind are installed and configured

MOUNT_WITH_ACCESS_KEYS=${MOUNT_WITH_ACCESS_KEYS:-n}
PATH="$(pwd):$PATH"
CODE_BASE_DIR="$(pwd)"
TEST_CLUSTER_DIR='kind-cluster/kind-csi-experiment-testing-corp' 

rm -rf "${TEST_CLUSTER_DIR}"

mkdir -p "${TEST_CLUSTER_DIR}"
cp kind-cluster/ca.pem kind-cluster/client-cert.pem kind-cluster/client-key.pem "${TEST_CLUSTER_DIR}"
cd "${TEST_CLUSTER_DIR}"

echo "Creating a Dockerfile * * * * * * * * *  * * * * * * * * * * * * * * * * *"
echo ""
echo ""
tee -a Dockerfile << END
FROM kindest/node:v1.25.0
RUN apt-get -y update 
RUN apt-get -y install wget && apt-get install -y git && apt install -y nano
RUN groupadd -g 10001 nginx; useradd -u 10001 -g 10001 nginx
ENV CSI_DRIVER="quobyte"
ENV QUOBYTE_API_URL="http://testing-api.corp.quobyte.com:7860"
ENV QUOBYTE_REGISTRY="testing.corp.quobyte.com"
ENV CSI_PROVISIONER="csi.quobyte.com"
ENV QUOBYTE_MOUNT_POINT=/mnt/quobyte/mounts
ENV MOUNT_WITH_ACCESS_KEYS=$MOUNT_WITH_ACCESS_KEYS
END

echo "Building new image using the above Dockerfile. On the local machine: * * *"
# Change `v0` appropriately to whatever version is needed.
docker build -t 'quobyte/kind-node-testing:v0' -f Dockerfile .

docker image ls | grep 'quobyte/kind-node-testing:v0'

echo "Use the newly created image in the `kind` configuration: * * * * * * * * *"
tee -a kind-config-testing.yaml << END
kind: Cluster
name: quobyte-csi-experiment-testing
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  image: quobyte/kind-node-testing:v0
  extraMounts:
    # mount codebase into container
    - hostPath: ${CODE_BASE_DIR}
      containerPath: /quobyte-csi
- role: worker
  image: quobyte/kind-node-testing:v0
- role: worker
  image: quobyte/kind-node-testing:v0
- role: worker
  image: quobyte/kind-node-testing:v0
END

echo  "Creating cluster with kind: * * * * * * * * * * * * * * * * * * * * * * *"
kind create cluster --config=./kind-config-testing.yaml

echo  "Labeling Kubernetes nodes * * * * * * * * * * * * * * * * * * * * * * * *"
for node in $(kubectl get nodes --no-headers | awk '{print $1}'); do
  kubectl label nodes $node quobyte_client="true"
done

echo "creating and setting default namespace to quobyte * * * * * * * * * * * *" 
#to retrieve instances from all namespaces use '-A' argument
kubectl create ns quobyte
kubectl config get-contexts
kubectl get namespaces --context kind-quobyte-csi-experiment-testing
kubectl config use-context kind-quobyte-csi-experiment-testing
kubectl config set-context --current --namespace=quobyte

echo 'creating configmaps with required pem files'
kubectl -n kube-system create configmap quobyte-ca.pem --from-file=ca.pem
kubectl -n kube-system create configmap quobyte-cert.pem --from-file=client-cert.pem
kubectl -n kube-system create configmap quobyte-key.pem --from-file=client-key.pem

# chmod +x ../install_csi_3x ../pre-flight_checks
# docker cp ../install_csi_3x $(docker ps -aqf "name=control-plane"):/
# docker cp ../pre-flight_checks $(docker ps -aqf "name=control-plane"):/

#docker exec -it $(docker ps -aqf "name=control-plane") bash
